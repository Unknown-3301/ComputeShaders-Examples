<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ComputeShaders</name>
    </assembly>
    <members>
        <member name="T:ComputeShaders.ComputeShader">
            <summary>
            The main class for using compute shader class (Direct3D 11)
            </summary>
        </member>
        <member name="M:ComputeShaders.ComputeShader.#ctor(System.Byte[],System.Int32,ComputeShaders.CSDeviceCreationFlags)">
            <summary>
            Creates a compute shader class
            </summary>
            <param name="shaderByteCode">The byte code of the compiled shader</param>
            <param name="gpuAdapterIndex">The adapter (gpu) index. default: 0</param>
            <param name="gpuCreationgFlag"></param>
        </member>
        <member name="M:ComputeShaders.ComputeShader.#ctor(System.String,System.String,System.String,System.Int32,ComputeShaders.CSDeviceCreationFlags)">
            <summary>
            Creates a compute shader class
            </summary>
            <param name="shaderName">The path to the compute shader (relative to the solution this code is in)</param>
            <param name="entryPoint">The main kernel function of the shader</param>
            <param name="targetProfile">The type and version of the shader. default = cs_4_0. The type and version of the shader. default = cs_5_0. (cs is for Compute shader) (5_0 is for shader model 5.0)</param>
            <param name="gpuAdapterIndex">The adapter (gpu) index. default: 0</param>
            <param name="gpuCreationgFlag"></param>
        </member>
        <member name="M:ComputeShaders.ComputeShader.#ctor(System.Byte[],System.IntPtr)">
            <summary>
            Creates a compute shader and connect it to the device (from the device native pointer)
            </summary>
            <param name="shaderByteCode">The byte code of the compiled shader</param>
            <param name="deviceNativePointer">The native pointer for a Direct3D 11 device</param>
        </member>
        <member name="M:ComputeShaders.ComputeShader.CreateTexture2D(System.Int32,System.Int32,ComputeShaders.TextureFormat,System.Boolean)">
            <summary>
            Creates a new texture connected to this compute shader (sharing the same Direct3D 11 device)
            </summary>
            <param name="width">The width of the texture</param>
            <param name="height">The height of the texture</param>
            <param name="format">the format of the texture</param>
            <param name="allowSharing">Determines whether the created texture can be shared, if true then CSTexture2D.Share() can be called</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.ComputeShader.CreateTexture2D(System.Drawing.Bitmap,System.Boolean)">
            <summary>
            Creates a new texture (connected to this compute shader) having the bitmap information
            </summary>
            <param name="bitmap">The bitmap</param>
            <param name="allowSharing">Determines whether the created texture can be shared, if true then CSTexture2D.Share() can be called</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.ComputeShader.CreateTexture2D(System.String,System.Boolean)">
            <summary>
            Creates a new texture (connected to this compute shader) having the image information
            </summary>
            <param name="imageRelativePath">The relative path to the image file (relative to the solution this code is in)</param>
            <param name="allowSharing">Determines whether the created texture can be shared, if true then CSTexture2D.Share() can be called</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.ComputeShader.CreateTexture2D(System.Int32,System.Int32,ComputeShaders.TextureFormat,System.IntPtr,System.Boolean)">
            <summary>
            Creates a new texture (connected to this compute shader) having the data pointer information
            </summary>
            <param name="width">The width of the texture</param>
            <param name="height">The height of the texture</param>
            <param name="format">the format of the texture</param>
            <param name="dataPointer">The pointer that holds raw texture data</param>
            <param name="allowSharing">Determines whether the created texture can be shared, if true then CSTexture2D.Share() can be called</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.ComputeShader.CreateTexture2DArray(System.Int32,System.Int32,System.Int32,ComputeShaders.TextureFormat,System.Boolean)">
            <summary>
            Creates a new texture connected to this compute shader (sharing the same Direct3D 11 device)
            </summary>
            <param name="width">The width of the texture array</param>
            <param name="height">The height of the texture array</param>
            <param name="numberOfTextures">The number of texture in the texture array</param>
            <param name="format">the format of the texture array</param>
            <param name="allowSharing">Determines whether the created texture array can be shared, if true then CSTexture2DArray.Share() can be called</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.ComputeShader.CreateTexture2DArray(System.Boolean,System.Drawing.Bitmap[])">
            <summary>
            Creates a new texture (connected to this compute shader) having the bitmaps information
            </summary>
            <param name="allowSharing">Determines whether the created texture can be shared, if true then CSTexture2D.Share() can be called</param>
            <param name="bitmaps">The bitmaps (all with the same width, height, and format)</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.ComputeShader.CreateTexture2DArray(System.Int32,System.Int32,ComputeShaders.TextureFormat,System.Boolean,System.IntPtr[])">
            <summary>
            Creates a new texture (connected to this compute shader) having the data pointer information
            </summary>
            <param name="width">The width of the texture</param>
            <param name="height">The height of the texture</param>
            <param name="format">the format of the texture</param>
            <param name="allowSharing">Determines whether the created texture can be shared, if true then CSTexture2D.Share() can be called</param>
            <param name="dataPointers">The pointer that holds raw texture data</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.ComputeShader.CreateBuffer``1(``0,System.Int32)">
            <summary>
            Creates a new CSCBuffer (connected to this compute shader) that stores data
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data">The data to be stored in the buffet. It must be a sturct.</param>
            <param name="dataSizeInBytes">The size of the data in bytes.</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.ComputeShader.CreateStructuredBuffer``1(``0[],System.Int32,System.Boolean)">
            <summary>
            Creates a new StructuredBuffer (connected to this compute shader) that stores read/write data array.
            Be aware that the maximum size for a buffer is 25% of your Vram or 2gb, which is smaller, so the maximum number of elements is (maximum size / sizeof(T)).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">The array to be stored in the buffer.</param>
            <param name="eachElementSizeInBytes">The size of an element in the array in bytes.</param>
            <param name="allowSharing">Determines whether the created texture can be shared, if true then Share() can be called.</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.ComputeShader.CreateStructuredBuffer``1(System.Collections.Generic.List{``0},System.Int32,System.Boolean)">
            <summary>
            Creates a new StructuredBuffer (connected to this compute shader) that stores read/write data list
            Be aware that the maximum size for a buffer is 25% of your Vram or 2gb, which is smaller, so the maximum number of elements is (maximum size / sizeof(T)).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list to be stored.</param>
            <param name="eachElementSizeInBytes">The size of an element in the list in bytes.</param>
            <param name="allowSharing">Determines whether the created texture can be shared, if true then Share() can be called.</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ComputeShaders.ComputeShader.SetRWTexture2D(ComputeShaders.CSTexture2D,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:ComputeShaders.ComputeShader.SetRWTexture2DArray(ComputeShaders.CSTexture2DArray,System.Int32)" -->
        <member name="M:ComputeShaders.ComputeShader.SetBuffer``1(ComputeShaders.CSCBuffer{``0},System.Int32)">
            <summary>
            connects the buffer to a cbuffer in the computeShader. This can be used once so there is no need to call this function every frame or every time you change something in the buffer.
            </summary>
            <param name="cSBuffer">The buffer to be set.</param>
            <param name="register_buffer_index">the register index of the buffer in the compute shader.</param>
            <br>Example: cbuffer buffer : register(b0);   its register index is 0</br>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ComputeShaders.ComputeShader.SetRWStructuredBuffer``1(ComputeShaders.CSStructuredBuffer{``0},System.Int32)" -->
        <member name="M:ComputeShaders.ComputeShader.Dispatch(System.Int32,System.Int32,System.Int32)">
            <summary>
            Runs the compute shader
            </summary>
            <param name="threadsX">Number of threads in the x-axis</param>
            <param name="threadsY">Number of threads in the y-axis</param>
            <param name="threadsZ">Number of threads in the z-axis</param>
        </member>
        <member name="M:ComputeShaders.ComputeShader.CompileComputeShader(System.String,System.String,System.String)">
            <summary>
            Compile the compute shader.
            </summary>
            <param name="shaderName">The path to the compute shader (relative to the solution this code is in)</param>
            <param name="entryPoint">The main kernel function of the shader (1 kernel function for every compute shader class)</param>
            <param name="targetProfile">The type and version of the shader. default = cs_5_0. (cs is for Compute shader) (5_0 is for shader model 5.0)</param>
            <returns>Returns the byte code of the compiled shader</returns>
        </member>
        <member name="M:ComputeShaders.ComputeShader.CreateDevice(System.Int32,ComputeShaders.CSDeviceCreationFlags)">
            <summary>
            Creates a Direct3D 11 device
            </summary>
            <param name="gpuAdapterIndex"></param>
            <param name="gpuCreationgFlag"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:ComputeShaders.ComputeShader.Dispose">
            <summary>
            Dispose the unmanneged data to prevent memory leaks. This function must be called after finishing using this.
            </summary>
        </member>
        <member name="T:ComputeShaders.CSCBuffer`1">
            <summary>
            A class that stores data for cbuffer (in the compute shader)
            </summary>
        </member>
        <member name="M:ComputeShaders.CSCBuffer`1.UpdateBuffer(`0)">
            <summary>
            Updates the buffer data
            </summary>
            <param name="newData">the new data</param>
        </member>
        <member name="M:ComputeShaders.CSCBuffer`1.Dispose">
            <summary>
            Dispose the unmanneged data to prevent memory leaks. This function must be called after finishing using this.
            </summary>
        </member>
        <member name="T:ComputeShaders.CSStructuredBuffer`1">
            <summary>
            A class that stores an array of data for RWStructuredBuffer (in the compute shader)
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:ComputeShaders.CSStructuredBuffer`1.Length">
            <summary>
            The number of elements in the buffer.
            </summary>
        </member>
        <member name="P:ComputeShaders.CSStructuredBuffer`1.ElementSizeInBytes">
            <summary>
            The size of each element in the buffer in bytes.
            </summary>
        </member>
        <member name="M:ComputeShaders.CSStructuredBuffer`1.SetData(`0[])">
            <summary>
            Updates the data stored in the buffer
            </summary>
            <param name="array">The new data</param>
        </member>
        <member name="M:ComputeShaders.CSStructuredBuffer`1.SetData(System.Collections.Generic.List{`0})">
            <summary>
            Updates the data stored in the buffer
            </summary>
            <param name="list">The new data</param>
        </member>
        <member name="M:ComputeShaders.CSStructuredBuffer`1.GetData(`0[]@)">
            <summary>
            Copy the data in the buffer to the array
            </summary>
            <param name="array">the array to copy to</param>
        </member>
        <member name="M:ComputeShaders.CSStructuredBuffer`1.GetData(System.Collections.Generic.List{`0}@)">
            <summary>
            Copy the data in the buffer to the list.
            NOTE: it's prefered to use the GetData(ref T[] array) because using a list (this function) is alot slower
            </summary>
            <param name="list">the list to copy to</param>
        </member>
        <member name="M:ComputeShaders.CSStructuredBuffer`1.EnableCPU_Raw_ReadWrite">
            <summary>
            Disables the ability to read/write the resource raw data using cpu. Disables it has the advantages (if cpu read/write was enabled):
            <br>- may increase the performance.</br>
            <br>- decrease the memory usage to almost the half.</br>
            <br>and has the disadvantages:</br>
            <br>- can not read the resource raw data using GetRawDataIntPtr function.</br>
            <br>- can not write to the resource raw data using WriteToRawData function.</br>
            </summary>
        </member>
        <member name="M:ComputeShaders.CSStructuredBuffer`1.Share(ComputeShaders.ComputeShader)">
            <summary>
            Connects this resource to another compute shader so that data can read/write between the resource and the compute shader or any resource connected to it directly. NOTE: after calling this function if any changes occured to the resource or the shared version then Flush() must be called on the changed resource.
            </summary>
            <param name="shader">The compute shader to connect with.</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.CSStructuredBuffer`1.Share``1(ComputeShaders.ShaderResource{``0})">
            <summary>
            Connects this resource to another resource so that data can read/write between the resource and the other resource or any resource connected to it directly. NOTE: after calling this function if any changes occured to the resource or the shared version then Flush() must be called on the changed resource.
            </summary>
            <param name="another">The another shader resource to connect with</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.CSStructuredBuffer`1.Share(System.IntPtr)">
            <summary>
            Connects this resource to a Direct3D 11 device so that data can read/write between the resource and the other resource or any resource connected to it directly. NOTE: after calling this function if any changes occured to the resource or the shared version then Flush() must be called on the changed resource.
            </summary>
            <param name="devicePointer">The Direct3D 11 device to connect with</param>
            <returns></returns>
        </member>
        <member name="T:ComputeShaders.CSTexture2D">
            <summary>
            The class that holds the texture data. This class can be created in ComputeShader class
            </summary>
        </member>
        <member name="P:ComputeShaders.CSTexture2D.Width">
            <summary>
            The width of the texture
            </summary>
        </member>
        <member name="P:ComputeShaders.CSTexture2D.Height">
            <summary>
            The height of the texture
            </summary>
        </member>
        <member name="P:ComputeShaders.CSTexture2D.Format">
            <summary>
            The format of the texture
            </summary>
        </member>
        <member name="M:ComputeShaders.CSTexture2D.#ctor(System.IntPtr,ComputeShaders.TextureFormat)">
            <summary>
            Create a new texture using a texture pointer
            </summary>
            <param name="nativePointer">The texture pointer</param>
            <param name="format">The format of the texture</param>
        </member>
        <member name="M:ComputeShaders.CSTexture2D.EnableCPU_Raw_ReadWrite">
            <summary>
            Disables the ability to read/write the resource raw data using cpu. Disables it has the advantages (if cpu read/write was enabled):
            <br>- may increase the performance.</br>
            <br>- decrease the memory usage to almost the half.</br>
            <br>and has the disadvantages:</br>
            <br>- can not read the resource raw data using GetRawDataIntPtr function.</br>
            <br>- can not write to the resource raw data using WriteToRawData function.</br>
            </summary>
        </member>
        <member name="M:ComputeShaders.CSTexture2D.Share(ComputeShaders.ComputeShader)">
            <summary>
            Connects this resource to another compute shader so that data can read/write between the resource and the compute shader or any resource connected to it directly. NOTE: after calling this function if any changes occured to the resource or the shared version then Flush() must be called on the changed resource.
            </summary>
            <param name="shader">The compute shader to connect with.</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.CSTexture2D.Share``1(ComputeShaders.ShaderResource{``0})">
            <summary>
            Connects this resource to another resource so that data can read/write between the resource and the other resource or any resource connected to it directly. NOTE: after calling this function if any changes occured to the resource or the shared version then Flush() must be called on the changed resource.
            </summary>
            <param name="another">The another shader resource to connect with</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.CSTexture2D.Share(System.IntPtr)">
            <summary>
            Connects this resource to a Direct3D 11 device so that data can read/write between the resource and the other resource or any resource connected to it directly. NOTE: after calling this function if any changes occured to the resource or the shared version then Flush() must be called on the changed resource.
            </summary>
            <param name="devicePointer">The Direct3D 11 device to connect with</param>
            <returns></returns>
        </member>
        <member name="T:ComputeShaders.CSTexture2DArray">
            <summary>
            The class that holds the texture array data. This class can be created in ComputeShader class
            </summary>
        </member>
        <member name="P:ComputeShaders.CSTexture2DArray.Width">
            <summary>
            The width of the texture
            </summary>
        </member>
        <member name="P:ComputeShaders.CSTexture2DArray.Height">
            <summary>
            The height of the texture
            </summary>
        </member>
        <member name="P:ComputeShaders.CSTexture2DArray.Textures">
            <summary>
            The number of textures in the texture array
            </summary>
        </member>
        <member name="P:ComputeShaders.CSTexture2DArray.Format">
            <summary>
            The format of the texture
            </summary>
        </member>
        <member name="M:ComputeShaders.CSTexture2DArray.#ctor(System.IntPtr,ComputeShaders.TextureFormat)">
            <summary>
            Create a new texture array using a texture array pointer
            </summary>
            <param name="nativePointer">The texture array pointer</param>
            <param name="format">The format of the texture</param>
        </member>
        <member name="M:ComputeShaders.CSTexture2DArray.EnableCPU_Raw_ReadWrite">
            <summary>
            Disables the ability to read/write the resource raw data using cpu. Disables it has the advantages (if cpu read/write was enabled):
            <br>- may increase the performance.</br>
            <br>- decrease the memory usage to almost the half.</br>
            <br>and has the disadvantages:</br>
            <br>- can not read the resource raw data using GetRawDataIntPtr function.</br>
            <br>- can not write to the resource raw data using WriteToRawData function.</br>
            </summary>
        </member>
        <member name="M:ComputeShaders.CSTexture2DArray.Share(ComputeShaders.ComputeShader)">
            <summary>
            Connects this resource to another compute shader so that data can read/write between the resource and the compute shader or any resource connected to it directly. NOTE: after calling this function if any changes occured to the resource or the shared version then Flush() must be called on the changed resource.
            </summary>
            <param name="shader">The compute shader to connect with.</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.CSTexture2DArray.Share``1(ComputeShaders.ShaderResource{``0})">
            <summary>
            Connects this resource to another resource so that data can read/write between the resource and the other resource or any resource connected to it directly. NOTE: after calling this function if any changes occured to the resource or the shared version then Flush() must be called on the changed resource.
            </summary>
            <param name="another">The another shader resource to connect with</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.CSTexture2DArray.Share(System.IntPtr)">
            <summary>
            Connects this resource to a Direct3D 11 device so that data can read/write between the resource and the other resource or any resource connected to it directly. NOTE: after calling this function if any changes occured to the resource or the shared version then Flush() must be called on the changed resource.
            </summary>
            <param name="devicePointer">The Direct3D 11 device to connect with</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.CSTexture2DArray.WriteToSliceRawData(System.Action{ComputeShaders.TextureDataBox},System.Int32)">
            <summary>
            Write to the a slice (a slice from texture array means a single texture2D) raw data (using only cpu) by an write function.
            NOTE: the data box pointer is aligned to 16 bytes. Check: https://learn.microsoft.com/en-us/windows/win32/api/d3d11/ns-d3d11-d3d11_mapped_subresource
            </summary>
            <param name="writeAction"></param>
            <param name="sliceIndex">The index of the texture (slice) in the texture array.</param>
        </member>
        <member name="M:ComputeShaders.CSTexture2DArray.ReadFromSliceRawData(System.Action{ComputeShaders.TextureDataBox},System.Int32)">
            <summary>
            Reads through the slice (a slice from texture array means a single texture2D) raw data using 'readAction'.
            NOTE: all the reading process must ONLY be done inside 'readAction' function. Also, the data box pointer is aligned to 16 bytes. Check: https://learn.microsoft.com/en-us/windows/win32/api/d3d11/ns-d3d11-d3d11_mapped_subresource
            </summary>
            <param name="readAction"></param>
            <param name="sliceIndex">The index of the texture (slice) in the texture array.</param>
        </member>
        <member name="T:ComputeShaders.MultipleOf16CSTexture2DConverter">
            <summary>
            A class that converts CSTexture2D to Bitmap
            </summary>
        </member>
        <member name="M:ComputeShaders.MultipleOf16CSTexture2DConverter.#ctor(ComputeShaders.CSTexture2D)">
            <summary>
            Creates a new CSTexture2D to Bitmap converter. NOTE: NOTE: if your texture width can be a multiple of 16, then make it a multiple of 16 and use MultipleOf16CSTexture2DConverter for better performance
            </summary>
        </member>
        <member name="M:ComputeShaders.MultipleOf16CSTexture2DConverter.Convert(ComputeShaders.CSTexture2D)">
            <summary>
            Copy the information from "source" to a bitmap
            </summary>
            <param name="source">The CSTexture2D to copy from</param>
        </member>
        <member name="M:ComputeShaders.MultipleOf16CSTexture2DConverter.Dispose">
            <summary>
            Dispose the unmanneged data to prevent memory leaks. This function must be called after finishing using this.
            </summary>
        </member>
        <member name="T:ComputeShaders.CSTexture2DConverter">
            <summary>
            A class that converts CSTexture2D to Bitmap
            </summary>
        </member>
        <member name="M:ComputeShaders.CSTexture2DConverter.#ctor(ComputeShaders.CSTexture2D)">
            <summary>
            Creates a new CSTexture2D to Bitmap converter. NOTE: NOTE: if your texture width can be a multiple of 16, then make it a multiple of 16 and use MultipleOf16CSTexture2DConverter for better performance
            </summary>
        </member>
        <member name="M:ComputeShaders.CSTexture2DConverter.Convert(ComputeShaders.CSTexture2D)">
            <summary>
            Copy the information from "source" to a bitmap
            </summary>
            <param name="source">The CSTexture2D to copy from</param>
        </member>
        <member name="M:ComputeShaders.CSTexture2DConverter.Dispose">
            <summary>
            Dispose the unmanneged data to prevent memory leaks. This function must be called after finishing using this.
            </summary>
        </member>
        <member name="T:ComputeShaders.ShaderResource`1">
            <summary>
            A base class for all shader Resources (exept constant buffer).
            </summary>
        </member>
        <member name="P:ComputeShaders.ShaderResource`1.CPU_ReadWrite">
            <summary>
            The ability to read/write the resource raw data in the cpu
            </summary>
        </member>
        <member name="M:ComputeShaders.ShaderResource`1.Share(ComputeShaders.ComputeShader)">
            <summary>
            Connects this resource to another compute shader so that data can read/write between the resource and the compute shader or any resource connected to it directly. NOTE: after calling this function if any changes occured to the resource or the shared version then Flush() must be called on the changed resource.
            </summary>
            <param name="shader">The compute shader to connect with.</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.ShaderResource`1.Share``1(ComputeShaders.ShaderResource{``0})">
            <summary>
            Connects this resource to another resource so that data can read/write between the resource and the other resource or any resource connected to it directly. NOTE: after calling this function if any changes occured to the resource or the shared version then Flush() must be called on the changed resource.
            </summary>
            <param name="another">The another shader resource to connect with</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.ShaderResource`1.Share(System.IntPtr)">
            <summary>
            Connects this resource to a Direct3D 11 device so that data can read/write between the resource and the other resource or any resource connected to it directly. NOTE: after calling this function if any changes occured to the resource or the shared version then Flush() must be called on the changed resource.
            </summary>
            <param name="devicePointer">The Direct3D 11 device to connect with</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.ShaderResource`1.Flush">
            <summary>
            Sends queued-up commands in the command buffer to the graphics processing unit (GPU). It is used after updating a shared resource.
            </summary>
        </member>
        <member name="M:ComputeShaders.ShaderResource`1.GetResourceSize">
            <summary>
            Returns the size of the resource in bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.ShaderResource`1.CopyTo(ComputeShaders.ShaderResource{`0})">
            <summary>
            Copy the contents from this resource to another resource.
            NOTE: In case that the 2 resources connect to different shaders, CPU read/write ability must be enabled for both resources. Both resource must have exact same dimensions. This function is so slow compared to other methods like using shared resources.
            </summary>
            <param name="destination">The resource to copy to.</param>
        </member>
        <member name="M:ComputeShaders.ShaderResource`1.WriteToRawData(System.Action{ComputeShaders.TextureDataBox})">
            <summary>
            Write to the resource raw data (using only cpu) by an write function.
            NOTE: the data box pointer is aligned to 16 bytes. Check: https://learn.microsoft.com/en-us/windows/win32/api/d3d11/ns-d3d11-d3d11_mapped_subresource
            </summary>
            <param name="writeAction"></param>
        </member>
        <member name="M:ComputeShaders.ShaderResource`1.ReadFromRawData(System.Action{ComputeShaders.TextureDataBox})">
            <summary>
            Reads through the raw data using 'readAction'.
            NOTE: all the reading process must ONLY be done inside 'readAction' function. Also, the data box pointer is aligned to 16 bytes. Check: https://learn.microsoft.com/en-us/windows/win32/api/d3d11/ns-d3d11-d3d11_mapped_subresource
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.ShaderResource`1.EnableCPU_Raw_ReadWrite">
            <summary>
            Enables the ability to read/write the resource raw data using cpu. Enabling it has the advantages:
            <br>- to read the resource raw data using GetRawDataIntPtr function.</br>
            <br>- to write to the resource raw data using WriteToRawData function.</br>
            <br>and has the disadvantages:</br>
            <br>- may decrease the performance.</br>
            <br>- increase the memory usage to almost the double.</br>
            </summary>
        </member>
        <member name="M:ComputeShaders.ShaderResource`1.DisablesCPU_Raw_ReadWrite">
            <summary>
            Disables the ability to read/write the resource raw data using cpu. Disables it has the advantages (if cpu read/write was enabled):
            <br>- may increase the performance.</br>
            <br>- decrease the memory usage to almost the half.</br>
            <br>and has the disadvantages:</br>
            <br>- can not read the resource raw data using GetRawDataIntPtr function.</br>
            <br>- can not write to the resource raw data using WriteToRawData function.</br>
            </summary>
        </member>
        <member name="M:ComputeShaders.ShaderResource`1.Dispose">
            <summary>
            Dispose the unmanneged data to prevent memory leaks. This function must be called after finishing using the resource.
            </summary>
        </member>
        <member name="T:ComputeShaders.TextureDataBox">
            <summary>
            A struct that provides an access to texture data pointers
            </summary>
        </member>
        <member name="P:ComputeShaders.TextureDataBox.DataPointer">
            <summary>
            The data pointer. It is aligned to 16 bytes
            </summary>
        </member>
        <member name="P:ComputeShaders.TextureDataBox.RowPitch">
            <summary>
            Gets the number of bytes per row.
            </summary>
        </member>
        <member name="P:ComputeShaders.TextureDataBox.SlicePitch">
            <summary>
            Gets the number of bytes per slice (for a 3D texture, a slice is a 2D image)
            </summary>
        </member>
        <member name="P:ComputeShaders.TextureDataBox.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:ComputeShaders.TextureFormat">
            <summary>
            The possible formats
            </summary>
        </member>
        <member name="T:ComputeShaders.TextureFormatHelper">
            <summary>
            A helper class for TextureFormat
            </summary>
        </member>
        <member name="M:ComputeShaders.TextureFormatHelper.ConvertFormatToBitmap(ComputeShaders.TextureFormat)">
            <summary>
            Converts a TextureFormat enum to its equivalent in PixelFormat. NOTE: if no equivalent is found it will return PixelFormat.Undefined
            </summary>
            <param name="format">The format</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.TextureFormatHelper.ConvertBitmapToFormat(System.Drawing.Imaging.PixelFormat)">
            <summary>
            Converts a PixelFormat enum to its equivalent in TextureFormat. NOTE: if no equivalent is found it will return TextureFormat.Unknown
            </summary>
            <param name="pixelFormat">The format</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.Utilities.CopyMemory(System.IntPtr,System.IntPtr,System.UInt32)">
            <summary>
            Copies the data from the scr pointer to the dest pointer.
            </summary>
            <param name="dest">Destination pointer.</param>
            <param name="src">Source pointer.</param>
            <param name="count">Data length in bytes.</param>
        </member>
        <member name="M:ComputeShaders.Utilities.GetIntPtr(System.Object,System.Runtime.InteropServices.GCHandle@)">
            <summary>
            Return the address of the object
            </summary>
            <param name="obj">The object</param>
            <param name="handle">The handle that should be disposed (handle.Free()) after finishing using the address</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.Utilities.GetReversedBitmap(System.Drawing.Bitmap,System.Drawing.Bitmap@)">
            <summary>
            Get the data of a bitmap but upsidedown and the red and blue channels are swapped
            </summary>
            <param name="bitmap"></param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.Utilities.GetPrivteVariableDataCasted``2(System.String,``0)">
            <summary>
            Gets the private variable from and object Casted
            </summary>
            <typeparam name="T">Object type that contains the private variable</typeparam>
            <typeparam name="D">The type of the private variable</typeparam>
            <param name="variableName">The name of the private variable</param>
            <param name="obj">The object that contains the private variable</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.Utilities.GetPrivteVariableDataUncasted``2(System.String,``0)">
            <summary>
            Gets the private variable from and object Uncasted
            </summary>
            <typeparam name="T">Object type that contains the private variable</typeparam>
            <typeparam name="D">The type of the private variable</typeparam>
            <param name="variableName">The name of the private variable</param>
            <param name="obj">The object that contains the private variable</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.Utilities.GetObjectFromIntPtr``1(System.IntPtr)">
            <summary>
            returns the object from the pointer given
            </summary>
            <typeparam name="T">The object type</typeparam>
            <param name="intPtr">the pointer to the object data in memory</param>
            <returns></returns>
        </member>
    </members>
</doc>

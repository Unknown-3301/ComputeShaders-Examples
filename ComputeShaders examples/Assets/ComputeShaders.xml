<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ComputeShaders</name>
    </assembly>
    <members>
        <member name="T:ComputeShaders.ComputeShader">
            <summary>
            The main class for using compute shader class (Direct3D 11)
            </summary>
        </member>
        <member name="P:ComputeShaders.ComputeShader.Device">
            <summary>
            The device connected to this compute shader.
            </summary>
        </member>
        <member name="M:ComputeShaders.ComputeShader.CompileComputeShader(System.String,System.String,System.String)">
            <summary>
            Compile the compute shader.
            </summary>
            <param name="shaderName">The path to the compute shader (relative to the solution this code is in)</param>
            <param name="entryPoint">The main kernel function of the shader (1 kernel function for every compute shader class)</param>
            <param name="targetProfile">The type and version of the shader. default = cs_5_0. (cs is for Compute shader) (5_0 is for shader model 5.0)</param>
            <returns>Returns the byte code of the compiled shader</returns>
        </member>
        <member name="M:ComputeShaders.ComputeShader.Dispose">
            <summary>
            Dispose the unmanneged data to prevent memory leaks. This function must be called after finishing using this.
            </summary>
        </member>
        <member name="T:ComputeShaders.CSCBuffer`1">
            <summary>
            A class that stores data for cbuffer (in the compute shader)
            </summary>
        </member>
        <member name="P:ComputeShaders.CSCBuffer`1.Device">
            <summary>
            The device connected to this resource.
            </summary>
        </member>
        <member name="M:ComputeShaders.CSCBuffer`1.UpdateBuffer(`0)">
            <summary>
            Updates the buffer data
            </summary>
            <param name="newData">the new data</param>
        </member>
        <member name="M:ComputeShaders.CSCBuffer`1.Dispose">
            <summary>
            Dispose the unmanneged data to prevent memory leaks. This function must be called after finishing using this.
            </summary>
        </member>
        <member name="T:ComputeShaders.CSDevice">
            <summary>
            The main class for running compute shaders (Direct3D 11)
            </summary>
        </member>
        <member name="P:ComputeShaders.CSDevice.DeviceNativePointer">
            <summary>
            The <see cref="T:SharpDX.Direct3D11.Device"/> native pointer.
            </summary>
        </member>
        <member name="P:ComputeShaders.CSDevice.CurrentShader">
            <summary>
            The shader that the device currently use. This is the shader that will run upon calling <see cref="M:ComputeShaders.CSDevice.Dispatch(System.Int32,System.Int32,System.Int32)"/>
            <br>To change it use <see cref="M:ComputeShaders.CSDevice.SetComputeShader(ComputeShaders.ComputeShader)"/>.</br>
            </summary>
        </member>
        <member name="M:ComputeShaders.CSDevice.#ctor(System.Int32,ComputeShaders.CSDeviceCreationFlags)">
            <summary>
            Creates a new device.
            </summary>
            <param name="gpuAdapterIndex">The index of the adapter to enumerate.</param>
            <param name="gpuCreationgFlag">Describes parameters that are used to create a device.</param>
        </member>
        <member name="M:ComputeShaders.CSDevice.CreateComputeShader(System.Byte[])">
            <summary>
            Creates a compute shader connected to this device.
            </summary>
            <param name="shaderByteCode">The byte code of the compiled shader. You can get the compiled byte array of a shader file using <see cref="M:ComputeShaders.ComputeShader.CompileComputeShader(System.String,System.String,System.String)"/></param>
        </member>
        <member name="M:ComputeShaders.CSDevice.CreateComputeShader(System.String,System.String,System.String)">
            <summary>
            Creates a compute shader connected to this device.
            </summary>
            <param name="shaderName">The path to the compute shader (relative to the solution this code is in)</param>
            <param name="entryPoint">The main kernel function of the shader</param>
            <param name="targetProfile">The type and version of the shader. default = cs_4_0. The type and version of the shader. default = cs_5_0. (cs is for Compute shader) (5_0 is for shader model 5.0)</param>
        </member>
        <member name="M:ComputeShaders.CSDevice.CreateTexture2D(System.Int32,System.Int32,ComputeShaders.TextureFormat,System.Boolean)">
            <summary>
            Creates a new texture connected to this device.
            </summary>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="format">the format of the texture.</param>
            <param name="allowSharing">Determines whether the created texture can be shared, if true then <see cref="M:ComputeShaders.CSTexture2D.Share(ComputeShaders.CSDevice)"/> can be called.</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.CSDevice.CreateTexture2D(System.Drawing.Bitmap,System.Boolean)">
            <summary>
            Creates a new texture connected to this device containing <paramref name="bitmap"/> data.
            </summary>
            <param name="bitmap">The bitmap.</param>
            <param name="allowSharing">Determines whether the created texture can be shared, if true then <see cref="M:ComputeShaders.CSTexture2D.Share(ComputeShaders.CSDevice)"/> can be called.</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.CSDevice.CreateTexture2D(System.String,System.Boolean)">
            <summary>
            Creates a new texture connected to this device containing the image from <paramref name="imageRelativePath"/> data.
            </summary>
            <param name="imageRelativePath">The relative path to the image file (relative to the solution this code is in).</param>
            <param name="allowSharing">Determines whether the created texture can be shared, if true then <see cref="M:ComputeShaders.CSTexture2D.Share(ComputeShaders.CSDevice)"/> can be called.</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.CSDevice.CreateTexture2D(System.Int32,System.Int32,ComputeShaders.TextureFormat,System.IntPtr,System.Boolean)">
            <summary>
            Creates a new texture connected to this device containing the data stored in <paramref name="dataPointer"/>.
            </summary>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="format">the format of the texture.</param>
            <param name="dataPointer">The pointer that holds raw texture data</param>
            <param name="allowSharing">Determines whether the created texture can be shared, if true then <see cref="M:ComputeShaders.CSTexture2D.Share(ComputeShaders.CSDevice)"/> can be called.</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.CSDevice.CreateTexture2DArray(System.Int32,System.Int32,System.Int32,ComputeShaders.TextureFormat,System.Boolean)">
            <summary>
            Creates a new texture connected to this device.
            </summary>
            <param name="width">The width of the texture array.</param>
            <param name="height">The height of the texture array.</param>
            <param name="numberOfTextures">The number of texture in the texture array.</param>
            <param name="format">the format of the texture array.</param>
            <param name="allowSharing">Determines whether the created texture array can be shared, if true then <see cref="M:ComputeShaders.CSTexture2DArray.Share(ComputeShaders.CSDevice)"/> can be called.</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.CSDevice.CreateTexture2DArray(System.Boolean,System.Drawing.Bitmap[])">
            <summary>
            Creates a new texture connected to this device where every slice in the texture array contains the data from its equivalent slice from <paramref name="bitmaps"/>.
            </summary>
            <param name="allowSharing">Determines whether the created texture can be shared, if true then <see cref="M:ComputeShaders.CSTexture2DArray.Share(ComputeShaders.CSDevice)"/> can be called.</param>
            <param name="bitmaps">The bitmaps (all with the same width, height, and format).</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.CSDevice.CreateTexture2DArray(System.Int32,System.Int32,ComputeShaders.TextureFormat,System.Boolean,System.IntPtr[])">
            <summary>
            Creates a new texture connected to this device where every slice in the texture array contains the data from its equivalent slice from <paramref name="dataPointers"/>.
            </summary>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="format">the format of the texture.</param>
            <param name="allowSharing">Determines whether the created texture can be shared, if true then <see cref="M:ComputeShaders.CSTexture2DArray.Share(ComputeShaders.CSDevice)"/> can be called.</param>
            <param name="dataPointers">The pointer that holds raw texture data.</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.CSDevice.CreateBuffer``1(``0,System.Int32)">
            <summary>
            Creates a new constant buffer connected to this device that stores <paramref name="data"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data">The data to be stored in the buffer.</param>
            <param name="dataSizeInBytes">The size of the data in bytes.</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.CSDevice.CreateStructuredBuffer``1(``0[],System.Int32,System.Boolean)">
            <summary>
            Creates a new StructuredBuffer connected to this device containing <paramref name="array"/> data.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">The array to be stored in the buffer.</param>
            <param name="eachElementSizeInBytes">The size of an element in <paramref name="array"/> in bytes.</param>
            <param name="allowSharing">Determines whether the created texture can be shared, if true then <see cref="M:ComputeShaders.CSStructuredBuffer`1.Share(ComputeShaders.CSDevice)"/> can be called.</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.CSDevice.CreateStructuredBuffer``1(System.Collections.Generic.List{``0},System.Int32,System.Boolean)">
            <summary>
            Creates a new StructuredBuffer connected to this device containing <paramref name="list"/> data.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list to be stored.</param>
            <param name="eachElementSizeInBytes">The size of an element in <paramref name="list"/> in bytes.</param>
            <param name="allowSharing">Determines whether the created texture can be shared, if true then <see cref="M:ComputeShaders.CSStructuredBuffer`1.Share(ComputeShaders.CSDevice)"/> can be called.</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.CSDevice.SetRWTexture2D(ComputeShaders.CSTexture2D,System.Int32)">
            <summary>
            connects the texture to a RWTexture2D in the current compute shader.
            This function is can be called only once, even if a new compute shader is set using <see cref="M:ComputeShaders.CSDevice.SetComputeShader(ComputeShaders.ComputeShader)"/>. The only case to call this again is if a new compute shader is set and the <paramref name="register_uav_index"/>
            in that new shader is different from the old shader, then this function must be called again with <paramref name="register_uav_index"/> be the new uav index.
            </summary>
            <param name="texture">The texture to be set.</param>
            <param name="register_uav_index">the register index of the texture in the compute shader.</param>
        </member>
        <member name="M:ComputeShaders.CSDevice.SetRWTexture2DArray(ComputeShaders.CSTexture2DArray,System.Int32)">
            <summary>
            connects the texture to a RWTexture2DArray in the computeShader.
            This function is can be called only once, even if a new compute shader is set using <see cref="M:ComputeShaders.CSDevice.SetComputeShader(ComputeShaders.ComputeShader)"/>. The only case to call this again is if a new compute shader is set and the <paramref name="register_uav_index"/>
            in that new shader is different from the old shader, then this function must be called again with <paramref name="register_uav_index"/> be the new uav index.
            </summary>
            <param name="textureArray">The texture to be set.</param>
            <param name="register_uav_index">the register index of the texture in the compute shader.</param>
        </member>
        <member name="M:ComputeShaders.CSDevice.SetBuffer``1(ComputeShaders.CSCBuffer{``0},System.Int32)">
            <summary>
            connects the buffer to a cbuffer in the computeShader. 
            This function is can be called only once, even if a new compute shader is set using <see cref="M:ComputeShaders.CSDevice.SetComputeShader(ComputeShaders.ComputeShader)"/>. The only case to call this again is if a new compute shader is set and the <paramref name="register_buffer_index"/>
            in that new shader is different from the old shader, then this function must be called again with <paramref name="register_buffer_index"/> be the new uav index.
            </summary>
            <param name="cSBuffer">The buffer to be set.</param>
            <param name="register_buffer_index">the register index of the buffer in the compute shader.</param>
        </member>
        <member name="M:ComputeShaders.CSDevice.SetRWStructuredBuffer``1(ComputeShaders.CSStructuredBuffer{``0},System.Int32)">
            <summary>
            connects the structured buffer to a RWStructuredBuffer in the computeShader.
            This function is can be called only once, even if a new compute shader is set using <see cref="M:ComputeShaders.CSDevice.SetComputeShader(ComputeShaders.ComputeShader)"/>. The only case to call this again is if a new compute shader is set and the <paramref name="register_uav_index"/>
            in that new shader is different from the old shader, then this function must be called again with <paramref name="register_uav_index"/> be the new uav index.
            </summary>
            <param name="structuredBuffer">The structured buffer to be set.</param>
            <param name="register_uav_index">the register index of the buffer in the compute shader</param>
        </member>
        <member name="M:ComputeShaders.CSDevice.Dispatch(System.Int32,System.Int32,System.Int32)">
            <summary>
            Runs the current compute shader in use.
            <br>To know the current compute shader in use see <see cref="P:ComputeShaders.CSDevice.CurrentShader"/>.</br>
            </summary>
            <param name="threadsX">Number of threads in the x-axis</param>
            <param name="threadsY">Number of threads in the y-axis</param>
            <param name="threadsZ">Number of threads in the z-axis</param>
        </member>
        <member name="M:ComputeShaders.CSDevice.SetComputeShader(ComputeShaders.ComputeShader)">
            <summary>
            Sets the current compute shader in use to <paramref name="newShader"/>.
            </summary>
            <param name="newShader">The new compute shader to use.</param>
        </member>
        <member name="M:ComputeShaders.CSDevice.Dispose">
            <summary>
            Disposes the unmanaged data. 
            </summary>
        </member>
        <member name="T:ComputeShaders.CSDeviceCreationFlags">
            <summary>
            Describes parameters that are used to create a device. see https://learn.microsoft.com/en-us/windows/win32/api/d3d11/ne-d3d11-d3d11_create_device_flag for more information.
            </summary>
        </member>
        <member name="F:ComputeShaders.CSDeviceCreationFlags.SingleThreaded">
            <summary>
            Use this flag if your application will only call methods of Direct3D 11 interfaces from a single thread. By default, the ID3D11Device object is thread-safe.
            By using this flag, you can increase performance. However, if you use this flag and your application calls methods of Direct3D 11 interfaces from multiple threads, undefined behavior might result.
            </summary>
        </member>
        <member name="F:ComputeShaders.CSDeviceCreationFlags.Debug">
            <summary>
            Creates a device that supports the debug layer.
            To use this flag, you must have D3D11*SDKLayers.dll installed; otherwise, device creation fails. To get D3D11_1SDKLayers.dll, install the SDK for Windows 8.
            To see the debug information while using compute shaders use "Immediate Window" in visual studio.
            </summary>
        </member>
        <member name="F:ComputeShaders.CSDeviceCreationFlags.SwitchToRef">
            <summary>
            This flag is not supported in Direct3D 11.
            </summary>
        </member>
        <member name="F:ComputeShaders.CSDeviceCreationFlags.PreventThreadingOptimizations">
            <summary>
            Prevents multiple threads from being created. When this flag is used with a Windows Advanced Rasterization Platform (WARP) device, no additional threads will be created by WARP
            and all rasterization will occur on the calling thread. This flag is not recommended for general use. See remarks.
            </summary>
        </member>
        <member name="F:ComputeShaders.CSDeviceCreationFlags.BgraSupport">
            <summary>
            Creates a device that supports BGRA formats (<see cref="F:ComputeShaders.TextureFormat.B8G8R8A8_UNorm"/> and <see cref="F:ComputeShaders.TextureFormat.B8G8R8A8_UNorm_SRgb"/>). All 10level9 and higher hardware with WDDM 1.1+ drivers support BGRA formats.
            </summary>
        </member>
        <member name="F:ComputeShaders.CSDeviceCreationFlags.Debuggable">
            <summary>
            This value is not supported until Direct3D 11.1
            </summary>
        </member>
        <member name="F:ComputeShaders.CSDeviceCreationFlags.PreventAlteringLayerSettingsFromRegistry">
            <summary>
            This value is not supported until Direct3D 11.1
            </summary>
        </member>
        <member name="F:ComputeShaders.CSDeviceCreationFlags.DisableGpuTimeout">
            <summary>
            This value is not supported until Direct3D 11.1.
            </summary>
        </member>
        <member name="F:ComputeShaders.CSDeviceCreationFlags.VideoSupport">
            <summary>
            This value is not supported until Direct3D 11.1.
            </summary>
        </member>
        <member name="F:ComputeShaders.CSDeviceCreationFlags.None">
            <summary>
            None
            </summary>
        </member>
        <member name="T:ComputeShaders.CSStructuredBuffer`1">
            <summary>
            A class that stores an array of data for RWStructuredBuffer (in the compute shader)
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:ComputeShaders.CSStructuredBuffer`1.Length">
            <summary>
            The number of elements in the buffer.
            </summary>
        </member>
        <member name="P:ComputeShaders.CSStructuredBuffer`1.ElementSizeInBytes">
            <summary>
            The size of each element in the buffer in bytes.
            </summary>
        </member>
        <member name="M:ComputeShaders.CSStructuredBuffer`1.SetData(`0[])">
            <summary>
            Updates the data stored in the buffer
            </summary>
            <param name="array">The new data</param>
        </member>
        <member name="M:ComputeShaders.CSStructuredBuffer`1.SetData(System.Collections.Generic.List{`0})">
            <summary>
            Updates the data stored in the buffer
            </summary>
            <param name="list">The new data</param>
        </member>
        <member name="M:ComputeShaders.CSStructuredBuffer`1.GetData(`0[]@)">
            <summary>
            Copy the data in the buffer to the array
            </summary>
            <param name="array">the array to copy to</param>
        </member>
        <member name="M:ComputeShaders.CSStructuredBuffer`1.GetData(System.Collections.Generic.List{`0}@)">
            <summary>
            Copy the data in the buffer to the list.
            NOTE: it's prefered to use the GetData(ref T[] array) because using a list (this function) is alot slower
            </summary>
            <param name="list">the list to copy to</param>
        </member>
        <member name="M:ComputeShaders.CSStructuredBuffer`1.EnableCPU_Raw_ReadWrite">
            <summary>
            Disables the ability to read/write the resource raw data using cpu. Disables it has the advantages (if cpu read/write was enabled):
            <br>- may increase the performance.</br>
            <br>- decrease the memory usage to almost the half.</br>
            <br>and has the disadvantages:</br>
            <br>- can not read the resource raw data using GetRawDataIntPtr function.</br>
            <br>- can not write to the resource raw data using WriteToRawData function.</br>
            </summary>
        </member>
        <member name="M:ComputeShaders.CSStructuredBuffer`1.Share(ComputeShaders.CSDevice)">
            <summary>
            Connects this resource to another device so that data can read/write between the resource and the device or any resource connected to it directly. 
            <br>NOTE: after calling this function if any changes occured to the resource or the shared version then <see cref="M:ComputeShaders.ShaderResource`1.Flush"/> must be called on the changed resource.</br>
            </summary>
            <param name="device">The device to connect with.</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.CSStructuredBuffer`1.Share``1(ComputeShaders.ShaderResource{``0})">
            <summary>
            Connects this resource to another resource so that data can read/write between the resource and the other resource or any resource connected to it directly. 
            <br>NOTE: after calling this function if any changes occured to the resource or the shared version then <see cref="M:ComputeShaders.ShaderResource`1.Flush"/> must be called on the changed resource.</br>
            </summary>
            <param name="another">The another shader resource to connect with</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.CSStructuredBuffer`1.Share(System.IntPtr)">
            <summary>
            Connects this resource to a Direct3D 11 device so that data can read/write between the resource and the other resource or any resource connected to it directly. 
            <br>NOTE: after calling this function if any changes occured to the resource or the shared version then <see cref="M:ComputeShaders.ShaderResource`1.Flush"/> must be called on the changed resource.</br>/// </summary>
            <param name="devicePointer">The Direct3D 11 device to connect with</param>
            <returns></returns>
        </member>
        <member name="T:ComputeShaders.CSTexture2D">
            <summary>
            The class that holds the texture data. This class can be created in ComputeShader class
            </summary>
        </member>
        <member name="P:ComputeShaders.CSTexture2D.Width">
            <summary>
            The width of the texture
            </summary>
        </member>
        <member name="P:ComputeShaders.CSTexture2D.Height">
            <summary>
            The height of the texture
            </summary>
        </member>
        <member name="P:ComputeShaders.CSTexture2D.Format">
            <summary>
            The format of the texture
            </summary>
        </member>
        <member name="M:ComputeShaders.CSTexture2D.#ctor(System.IntPtr,ComputeShaders.TextureFormat)">
            <summary>
            Create a new texture using a texture pointer
            </summary>
            <param name="nativePointer">The texture pointer</param>
            <param name="format">The format of the texture</param>
        </member>
        <member name="M:ComputeShaders.CSTexture2D.EnableCPU_Raw_ReadWrite">
            <summary>
            Disables the ability to read/write the resource raw data using cpu. Disables it has the advantages (if cpu read/write was enabled):
            <br>- may increase the performance.</br>
            <br>- decrease the memory usage to almost the half.</br>
            <br>and has the disadvantages:</br>
            <br>- can not read the resource raw data using GetRawDataIntPtr function.</br>
            <br>- can not write to the resource raw data using WriteToRawData function.</br>
            </summary>
        </member>
        <member name="M:ComputeShaders.CSTexture2D.Share(ComputeShaders.CSDevice)">
            <summary>
            Connects this resource to another device so that data can read/write between the resource and the device or any resource connected to it directly. 
            <br>NOTE: after calling this function if any changes occured to the resource or the shared version then <see cref="M:ComputeShaders.ShaderResource`1.Flush"/> must be called on the changed resource.</br>
            </summary>
            <param name="device">The device to connect with.</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.CSTexture2D.Share``1(ComputeShaders.ShaderResource{``0})">
            <summary>
            Connects this resource to another resource so that data can read/write between the resource and the other resource or any resource connected to it directly. 
            <br>NOTE: after calling this function if any changes occured to the resource or the shared version then <see cref="M:ComputeShaders.ShaderResource`1.Flush"/> must be called on the changed resource.</br>
            </summary>
            <param name="another">The another shader resource to connect with</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.CSTexture2D.Share(System.IntPtr)">
            <summary>
            Connects this resource to a Direct3D 11 device so that data can read/write between the resource and the other resource or any resource connected to it directly. 
            <br>NOTE: after calling this function if any changes occured to the resource or the shared version then <see cref="M:ComputeShaders.ShaderResource`1.Flush"/> must be called on the changed resource.</br>/// </summary>
            <param name="devicePointer">The Direct3D 11 device to connect with</param>
            <returns></returns>
        </member>
        <member name="T:ComputeShaders.CSTexture2DArray">
            <summary>
            The class that holds the texture array data. This class can be created in ComputeShader class
            </summary>
        </member>
        <member name="P:ComputeShaders.CSTexture2DArray.Width">
            <summary>
            The width of the texture
            </summary>
        </member>
        <member name="P:ComputeShaders.CSTexture2DArray.Height">
            <summary>
            The height of the texture
            </summary>
        </member>
        <member name="P:ComputeShaders.CSTexture2DArray.Textures">
            <summary>
            The number of textures in the texture array
            </summary>
        </member>
        <member name="P:ComputeShaders.CSTexture2DArray.Format">
            <summary>
            The format of the texture
            </summary>
        </member>
        <member name="M:ComputeShaders.CSTexture2DArray.#ctor(System.IntPtr,ComputeShaders.TextureFormat)">
            <summary>
            Create a new texture array using a texture array pointer
            </summary>
            <param name="nativePointer">The texture array pointer</param>
            <param name="format">The format of the texture</param>
        </member>
        <member name="M:ComputeShaders.CSTexture2DArray.EnableCPU_Raw_ReadWrite">
            <summary>
            Disables the ability to read/write the resource raw data using cpu. Disables it has the advantages (if cpu read/write was enabled):
            <br>- may increase the performance.</br>
            <br>- decrease the memory usage to almost the half.</br>
            <br>and has the disadvantages:</br>
            <br>- can not read the resource raw data using GetRawDataIntPtr function.</br>
            <br>- can not write to the resource raw data using WriteToRawData function.</br>
            </summary>
        </member>
        <member name="M:ComputeShaders.CSTexture2DArray.Share(ComputeShaders.CSDevice)">
            <summary>
            Connects this resource to another device so that data can read/write between the resource and the device or any resource connected to it directly. 
            <br>NOTE: after calling this function if any changes occured to the resource or the shared version then <see cref="M:ComputeShaders.ShaderResource`1.Flush"/> must be called on the changed resource.</br>
            </summary>
            <param name="device">The device to connect with.</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.CSTexture2DArray.Share``1(ComputeShaders.ShaderResource{``0})">
            <summary>
            Connects this resource to another resource so that data can read/write between the resource and the other resource or any resource connected to it directly. 
            <br>NOTE: after calling this function if any changes occured to the resource or the shared version then <see cref="M:ComputeShaders.ShaderResource`1.Flush"/> must be called on the changed resource.</br>
            </summary>
            <param name="another">The another shader resource to connect with</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.CSTexture2DArray.Share(System.IntPtr)">
            <summary>
            Connects this resource to a Direct3D 11 device so that data can read/write between the resource and the other resource or any resource connected to it directly. 
            <br>NOTE: after calling this function if any changes occured to the resource or the shared version then <see cref="M:ComputeShaders.ShaderResource`1.Flush"/> must be called on the changed resource.</br>/// </summary>
            <param name="devicePointer">The Direct3D 11 device to connect with</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.CSTexture2DArray.WriteToSliceRawData(System.Action{ComputeShaders.TextureDataBox},System.Int32)">
            <summary>
            Write to the a slice (a slice from texture array means a single texture2D) raw data (using only cpu) by an write function.
            NOTE: the data box pointer is aligned to 16 bytes. Check: https://learn.microsoft.com/en-us/windows/win32/api/d3d11/ns-d3d11-d3d11_mapped_subresource
            </summary>
            <param name="writeAction"></param>
            <param name="sliceIndex">The index of the texture (slice) in the texture array.</param>
        </member>
        <member name="M:ComputeShaders.CSTexture2DArray.ReadFromSliceRawData(System.Action{ComputeShaders.TextureDataBox},System.Int32)">
            <summary>
            Reads through the slice (a slice from texture array means a single texture2D) raw data using 'readAction'.
            NOTE: all the reading process must ONLY be done inside 'readAction' function. Also, the data box pointer is aligned to 16 bytes. Check: https://learn.microsoft.com/en-us/windows/win32/api/d3d11/ns-d3d11-d3d11_mapped_subresource
            </summary>
            <param name="readAction"></param>
            <param name="sliceIndex">The index of the texture (slice) in the texture array.</param>
        </member>
        <member name="T:ComputeShaders.MultipleOf16CSTexture2DConverter">
            <summary>
            A class that converts CSTexture2D to Bitmap
            </summary>
        </member>
        <member name="M:ComputeShaders.MultipleOf16CSTexture2DConverter.#ctor(ComputeShaders.CSTexture2D)">
            <summary>
            Creates a new CSTexture2D to Bitmap converter. NOTE: NOTE: if your texture width can be a multiple of 16, then make it a multiple of 16 and use MultipleOf16CSTexture2DConverter for better performance
            </summary>
        </member>
        <member name="M:ComputeShaders.MultipleOf16CSTexture2DConverter.Convert(ComputeShaders.CSTexture2D)">
            <summary>
            Copy the information from "source" to a bitmap
            </summary>
            <param name="source">The CSTexture2D to copy from</param>
        </member>
        <member name="M:ComputeShaders.MultipleOf16CSTexture2DConverter.Dispose">
            <summary>
            Dispose the unmanneged data to prevent memory leaks. This function must be called after finishing using this.
            </summary>
        </member>
        <member name="T:ComputeShaders.CSTexture2DConverter">
            <summary>
            A class that converts CSTexture2D to Bitmap
            </summary>
        </member>
        <member name="M:ComputeShaders.CSTexture2DConverter.#ctor(ComputeShaders.CSTexture2D)">
            <summary>
            Creates a new CSTexture2D to Bitmap converter. NOTE: NOTE: if your texture width can be a multiple of 16, then make it a multiple of 16 and use MultipleOf16CSTexture2DConverter for better performance
            </summary>
        </member>
        <member name="M:ComputeShaders.CSTexture2DConverter.Convert(ComputeShaders.CSTexture2D)">
            <summary>
            Copy the information from "source" to a bitmap
            </summary>
            <param name="source">The CSTexture2D to copy from</param>
        </member>
        <member name="M:ComputeShaders.CSTexture2DConverter.Dispose">
            <summary>
            Dispose the unmanneged data to prevent memory leaks. This function must be called after finishing using this.
            </summary>
        </member>
        <member name="T:ComputeShaders.ShaderResource`1">
            <summary>
            A base class for all shader Resources (exept constant buffer).
            </summary>
        </member>
        <member name="P:ComputeShaders.ShaderResource`1.Device">
            <summary>
            The device connected to this resource.
            </summary>
        </member>
        <member name="P:ComputeShaders.ShaderResource`1.CPU_ReadWrite">
            <summary>
            The ability to read/write the resource raw data in the cpu
            </summary>
        </member>
        <member name="M:ComputeShaders.ShaderResource`1.Share(ComputeShaders.CSDevice)">
            <summary>
            Connects this resource to another device so that data can read/write between the resource and the device or any resource connected to it directly. 
            <br>NOTE: after calling this function if any changes occured to the resource or the shared version then <see cref="M:ComputeShaders.ShaderResource`1.Flush"/> must be called on the changed resource.</br>
            </summary>
            <param name="device">The device to connect with.</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.ShaderResource`1.Share``1(ComputeShaders.ShaderResource{``0})">
            <summary>
            Connects this resource to another resource so that data can read/write between the resource and the other resource or any resource connected to it directly. 
            <br>NOTE: after calling this function if any changes occured to the resource or the shared version then <see cref="M:ComputeShaders.ShaderResource`1.Flush"/> must be called on the changed resource.</br>
            </summary>
            <param name="another">The another shader resource to connect with</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.ShaderResource`1.Share(System.IntPtr)">
            <summary>
            Connects this resource to a Direct3D 11 device so that data can read/write between the resource and the other resource or any resource connected to it directly. 
            <br>NOTE: after calling this function if any changes occured to the resource or the shared version then <see cref="M:ComputeShaders.ShaderResource`1.Flush"/> must be called on the changed resource.</br>/// </summary>
            <param name="devicePointer">The Direct3D 11 device to connect with</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.ShaderResource`1.Flush">
            <summary>
            Sends queued-up commands in the command buffer to the graphics processing unit (GPU). It is used after updating a shared resource.
            </summary>
        </member>
        <member name="M:ComputeShaders.ShaderResource`1.GetResourceSize">
            <summary>
            Returns the size of the resource in bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.ShaderResource`1.CopyTo(ComputeShaders.ShaderResource{`0})">
            <summary>
            Copy the contents from this resource to another resource.
            NOTE: In case that the 2 resources connect to different shaders, CPU read/write ability must be enabled for both resources. Both resource must have exact same dimensions. This function is so slow compared to other methods like using shared resources.
            </summary>
            <param name="destination">The resource to copy to.</param>
        </member>
        <member name="M:ComputeShaders.ShaderResource`1.WriteToRawData(System.Action{ComputeShaders.TextureDataBox})">
            <summary>
            Write to the resource raw data (using only cpu) by an write function.
            NOTE: the data box pointer is aligned to 16 bytes. Check: https://learn.microsoft.com/en-us/windows/win32/api/d3d11/ns-d3d11-d3d11_mapped_subresource
            </summary>
            <param name="writeAction"></param>
        </member>
        <member name="M:ComputeShaders.ShaderResource`1.ReadFromRawData(System.Action{ComputeShaders.TextureDataBox})">
            <summary>
            Reads through the raw data using 'readAction'.
            NOTE: all the reading process must ONLY be done inside 'readAction' function. Also, the data box pointer is aligned to 16 bytes. Check: https://learn.microsoft.com/en-us/windows/win32/api/d3d11/ns-d3d11-d3d11_mapped_subresource
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.ShaderResource`1.EnableCPU_Raw_ReadWrite">
            <summary>
            Enables the ability to read/write the resource raw data using cpu. Enabling it has the advantages:
            <br>- to read the resource raw data using GetRawDataIntPtr function.</br>
            <br>- to write to the resource raw data using WriteToRawData function.</br>
            <br>and has the disadvantages:</br>
            <br>- may decrease the performance.</br>
            <br>- increase the memory usage to almost the double.</br>
            </summary>
        </member>
        <member name="M:ComputeShaders.ShaderResource`1.DisablesCPU_Raw_ReadWrite">
            <summary>
            Disables the ability to read/write the resource raw data using cpu. Disables it has the advantages (if cpu read/write was enabled):
            <br>- may increase the performance.</br>
            <br>- decrease the memory usage to almost the half.</br>
            <br>and has the disadvantages:</br>
            <br>- can not read the resource raw data using GetRawDataIntPtr function.</br>
            <br>- can not write to the resource raw data using WriteToRawData function.</br>
            </summary>
        </member>
        <member name="M:ComputeShaders.ShaderResource`1.Dispose">
            <summary>
            Dispose the unmanneged data to prevent memory leaks. This function must be called after finishing using the resource.
            </summary>
        </member>
        <member name="T:ComputeShaders.TextureDataBox">
            <summary>
            A struct that provides an access to texture data pointers
            </summary>
        </member>
        <member name="P:ComputeShaders.TextureDataBox.DataPointer">
            <summary>
            The data pointer. It is aligned to 16 bytes
            </summary>
        </member>
        <member name="P:ComputeShaders.TextureDataBox.RowPitch">
            <summary>
            Gets the number of bytes per row.
            </summary>
        </member>
        <member name="P:ComputeShaders.TextureDataBox.SlicePitch">
            <summary>
            Gets the number of bytes per slice (for a 3D texture, a slice is a 2D image)
            </summary>
        </member>
        <member name="P:ComputeShaders.TextureDataBox.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:ComputeShaders.TextureFormat">
            <summary>
            The possible formats
            </summary>
        </member>
        <member name="T:ComputeShaders.TextureFormatHelper">
            <summary>
            A helper class for TextureFormat
            </summary>
        </member>
        <member name="M:ComputeShaders.TextureFormatHelper.ConvertFormatToBitmap(ComputeShaders.TextureFormat)">
            <summary>
            Converts a TextureFormat enum to its equivalent in PixelFormat. NOTE: if no equivalent is found it will return PixelFormat.Undefined
            </summary>
            <param name="format">The format</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.TextureFormatHelper.ConvertBitmapToFormat(System.Drawing.Imaging.PixelFormat)">
            <summary>
            Converts a PixelFormat enum to its equivalent in TextureFormat. NOTE: if no equivalent is found it will return TextureFormat.Unknown
            </summary>
            <param name="pixelFormat">The format</param>
            <returns></returns>
        </member>
        <member name="T:ComputeShaders.Utilities">
            <summary>
            A class to store random functions used in the library.
            </summary>
        </member>
        <member name="M:ComputeShaders.Utilities.CopyMemory(System.IntPtr,System.IntPtr,System.UInt32)">
            <summary>
            Copies the data from the scr pointer to the dest pointer.
            </summary>
            <param name="dest">Destination pointer.</param>
            <param name="src">Source pointer.</param>
            <param name="count">Data length in bytes.</param>
        </member>
        <member name="M:ComputeShaders.Utilities.GetIntPtr(System.Object,System.Runtime.InteropServices.GCHandle@)">
            <summary>
            Return the address of the object
            </summary>
            <param name="obj">The object</param>
            <param name="handle">The handle that should be disposed (handle.Free()) after finishing using the address</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.Utilities.GetReversedBitmap(System.Drawing.Bitmap,System.Drawing.Bitmap@)">
            <summary>
            Get the data of a bitmap but upsidedown and the red and blue channels are swapped.
            </summary>
            <param name="bitmap"></param>
            <param name="temp">temporary bitmap that must be disposed after using <see cref="T:SharpDX.DataRectangle"/>. </param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.Utilities.GetPrivteVariableDataCasted``2(System.String,``0)">
            <summary>
            Gets the private variable from and object Casted
            </summary>
            <typeparam name="T">Object type that contains the private variable</typeparam>
            <typeparam name="D">The type of the private variable</typeparam>
            <param name="variableName">The name of the private variable</param>
            <param name="obj">The object that contains the private variable</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.Utilities.GetPrivteVariableDataUncasted``2(System.String,``0)">
            <summary>
            Gets the private variable from and object Uncasted
            </summary>
            <typeparam name="T">Object type that contains the private variable</typeparam>
            <typeparam name="D">The type of the private variable</typeparam>
            <param name="variableName">The name of the private variable</param>
            <param name="obj">The object that contains the private variable</param>
            <returns></returns>
        </member>
        <member name="M:ComputeShaders.Utilities.GetObjectFromIntPtr``1(System.IntPtr)">
            <summary>
            returns the object from <paramref name="intPtr"/>.
            </summary>
            <typeparam name="T">The object type</typeparam>
            <param name="intPtr">the pointer to the object data in memory</param>
            <returns></returns>
        </member>
    </members>
</doc>
